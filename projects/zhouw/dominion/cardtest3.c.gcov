        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        1:   10:int main(){
        1:   11:   int seed = 1000;
        1:   12:   int numPlayers = 2;
        -:   13:
        1:   14:     int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   15:
        -:   16:   struct gameState G, G1;
        1:   17:   memset(&G, 23, sizeof(struct gameState));
        1:   18:    memset(&G1, 23, sizeof(struct gameState));
        -:   19:
        1:   20:   initializeGame(numPlayers, k, seed, &G);
        1:   21:   memcpy(&G1, &G, sizeof(struct gameState));
        -:   22:
        1:   23:   printf("  **  cardtest makeVillage()  **  \n");
        1:   24:   makeVillage(&G1, 0, 0);
        -:   25:   int result, result1;
        1:   26:   result=G.numActions+2;
        1:   27:   result1=G1.numActions;
        -:   28:
        -:   29:   /*
        -:   30:           printf("original num action  is  %d\n", result);
        -:   31:              printf("new game nnum action  is %d\n", result1);
        -:   32:              
        -:   33:                      */
        -:   34:
        -:   35:  
        1:   36:   if (result==result1){
    #####:   37:     printf("Pass the test\n");
        -:   38:   }
        -:   39:    else{
        1:   40:    printf("Fail the test\n");
        -:   41:     }
        -:   42:
        1:   43:return 0;
        -:   44:}
