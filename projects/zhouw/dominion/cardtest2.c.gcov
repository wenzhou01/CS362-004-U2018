        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:
        1:   10:int main(){
        1:   11:   int seed = 3000;
        1:   12:   int numPlayers = 2;
        1:   13:   int tempHand=0;
        -:   14:   int card;
        1:   15:     int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   16:
        -:   17:   struct gameState G, G1;
        1:   18:    memset(&G, 23, sizeof(struct gameState));
        1:   19:    memset(&G1, 23, sizeof(struct gameState));
        -:   20:
        1:   21:   initializeGame(numPlayers, k, seed, &G);
        1:   22:   memcpy(&G1, &G, sizeof(struct gameState));
        -:   23:  
        -:   24:  
        1:   25:   makeAdventurer(&G1, 0, &tempHand);
        -:   26:
        1:   27:   int result=0;
        1:   28:   int  result1=0;
        -:   29:   int i;
        -:   30:
        8:   31:   for (i = 0; i < G1.handCount[0]; i++) {
        7:   32:        card = G1.hand[0][i];
        7:   33:        if (card == copper || card == silver || card == gold) {
        7:   34:            result1++;
        -:   35:        }
        -:   36:     }  
        -:   37:  
        6:   38:   for (i = 0; i < G.handCount[0]; i++) {
        5:   39:        card = G.hand[0][i];
        5:   40:        if (card == copper || card == silver || card == gold) {
        5:   41:            result++;
        -:   42:        }
        -:   43:     }
        -:   44:
        1:   45:      result=result+2;
        -:   46:/*
        -:   47:    printf("original reslut is %d\n", result);
        -:   48:    printf("new result is %d\n", result1);
        -:   49:
        -:   50:*/
        1:   51:     if (result==result1){
        1:   52:    printf("Pass the test\n");
        -:   53:       }
        -:   54:       else{
    #####:   55:        printf("Fail the test\n");
        -:   56:       }
        -:   57:
        -:   58:
        -:   59:
        1:   60:return 0;
        -:   61:}
