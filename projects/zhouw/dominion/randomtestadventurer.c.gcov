        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        1:   10:int main() {
        -:   11:    struct gameState G;
        1:   12:    int seed = 3000;
        1:   13:    int tempHand=0;
        1:   14:    int numPlayers = 2;
        1:   15:    int t=0; // count the fail
        -:   16:    
        1:   17:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   18:sea_hag, tribute, smithy, council_room}; 
        -:   19:
        -:   20:
        -:   21:
        -:   22:
        1:   23:   memset(&G, 23, sizeof(struct gameState));
        -:   24:
        -:   25:
        1:   26:   srand(time(NULL));
        -:   27:   int ii;
     1001:   28:   for (ii=0; ii<1000; ii++){
        -:   29:
     1000:   30:   initializeGame(numPlayers, k, seed, &G);
        -:   31:   int player, deckCount, handCount;
     1000:   32:   player=rand()%numPlayers;  // random player 0 or 1
     1000:   33:   deckCount=rand()%(MAX_DECK+1); // random deckCount
     1000:   34:   handCount=rand()%(deckCount+1);// rand handCount
        -:   35:
     1000:   36:   G.handCount[player]=handCount;
        -:   37: 
        -:   38:
        -:   39:
        -:   40:    // random the copper gold and silver
        -:   41:    
        -:   42:    int s, randomNum, randi;
     8570:   43:    for (s=0; s<G.deckCount[player]; s++){
        -:   44:          
     7570:   45:                randomNum = rand() % (50 + 1);
     7570:   46:                randi = rand() % (10);
     7570:   47:                if(randomNum == 2){
      142:   48:                    G.deck[player][s] = copper;
     7428:   49:                } else if(randomNum == 6){
      143:   50:                    G.deck[player][s] = silver;
     7285:   51:                }else if(randomNum == 9){
      149:   52:                    G.deck[player][s] = gold;
        -:   53:                }else {
     7136:   54:                    G.deck[player][s] = k[randi];
        -:   55:                }
        -:   56:        }
        -:   57:  
        -:   58:
        -:   59:   int i;
     1000:   60:   int coinCount1=0;
   124040:   61:   for (i=0; i<G.handCount[player]; i++){
   123040:   62: if(G.hand[player][i] == copper || G.hand[player][i] == silver || G.hand[player][i] == gold){
     3221:   63:         coinCount1++;
        -:   64:     }
        -:   65:}
        -:   66:
     1000:   67:   makeAdventurer(&G, player, &tempHand);
        -:   68:  
        -:   69:
        -:   70:
        -:   71:    int p;
     1000:   72:   int coinCount2=0;
    49835:   73:   for (p=0; p<G.handCount[player]; p++){
    48835:   74: if(G.hand[player][p] == copper || G.hand[player][p] == silver || G.hand[player][p] == gold){
     2314:   75:         coinCount2++;
        -:   76:     }
        -:   77:  }
        -:   78: 
        -:   79:
        -:   80:
        -:   81:
     1000:   82:              if (coinCount1+2!= coinCount2){
      957:   83:                t++;}
        -:   84:
        -:   85:   } 
        -:   86:              int pass;
        1:   87:             pass=1000-t;
        1:   88:    printf("****\n");
        1:   89:    printf("%d times failed in 1000 test\n", t);
        1:   90:    printf("%d times passed in 1000 test\n", pass);
        -:   91:
        1:   92:return 0;
        -:   93:}
        -:   94:
